<?xml version="1.0" encoding="UTF-8"?>
<project name="com.ibm.watson.smapi" default="build.update.jar" basedir=".">
	<import file="../com.ibm.watson.safari.feature/buildCommon.xml"/>

	<target name="init" depends="properties">
		<property name="plugin.name" value="com.ibm.watson.smapi"/>
		<property name="plugin.version" value="${safari.version}"/>
		<property name="plugin.jar.name" value="${plugin.name}_${plugin.version}.jar"/>
		<property name="plugin.zip.name" value="${plugin.name}_${plugin.version}.zip"/>
		<property name="plugin.src.zip" value="${plugin.name}src.zip"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/${plugin.name}">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

	</target>

	<!-- ================================================================================= -->

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${plugin.name} for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: ${plugin.name}.">
		<available property="plugin.jar" file="${build.result.folder}/${plugin.jar.name}"/>
		<antcall target="plugin.jar"/>
	</target>

	<target name="plugin.jar" depends="init" unless="${plugin.jar.name}" description="Create jar: ${plugin.jar.name}.">
		<delete dir="${temp.folder}/${plugin.jar.name}.bin"/>
		<mkdir dir="${temp.folder}/${plugin.jar.name}.bin"/>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/${plugin.jar.name}.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}" source="${javacSource}" target="${javacTarget}"		>
			<compilerarg line="${compilerArg}"/>
			<classpath>
				<pathelement path="../com.ibm.shrike/bin"/>
				<pathelement path="${eclipse.build.path}"/>
			</classpath>
			<src path="src/"/>
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/${plugin.jar.name}.bin" failonerror="true" overwrite="false">
			<fileset dir="src/" excludes="**/*.java,**/package.htm*"/>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<jar destfile="${build.result.folder}/${plugin.jar.name}" basedir="${temp.folder}/${plugin.jar.name}.bin"
			manifest="META-INF/MANIFEST.MF"/>
		<delete dir="${temp.folder}/${plugin.jar.name}.bin"/>
	</target>

	<!-- ================================================================================= -->

	<target name="build.sources" depends="init">
		<available property="pluginsrc.zip" file="${build.result.folder}/${plugin.src.zip}"/>
		<antcall target="pluginsrc.zip"/>
	</target>

	<target name="pluginsrc.zip" depends="init" unless="${plugin.src.zip}">
		<mkdir dir="${build.result.folder}"/>
		<zip destfile="${build.result.folder}/${plugin.src.zip}" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/" includes="**/*.java"/>
		</zip>
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${build.result.folder}/${plugin.src.zip}" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
		<copy todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false">
			<fileset dir="${basedir}" includes="icons/,doc/,build.properties,plugin.xml,schema/,src/"/>
		</copy>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${temp.folder}/${plugin.jar.name}.bin.log" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${plugin.name} of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/${plugin.jar.name}"/>
		<delete file="${build.result.folder}/${plugin.src.zip}"/>
		<delete file="${plugin.destination}/${plugin.jar.name}"/>
		<delete file="${plugin.destination}/${plugin.zip.name}"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="e:/rmf/eclipse/workspaces/safari/${plugin.name}" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${plugin.name}.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log"			/>
		</delete>
		<zip destfile="${plugin.destination}/${plugin.zip.name}" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

</project>
